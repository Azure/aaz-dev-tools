# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: disable=line-too-long
# pylint: disable=too-many-lines

from azure.cli.core.aaz import *


@register_command(
    "databricks workspace list",
    is_preview=True,
)
class List(AAZCommand):
    """Get all the workspaces.

    :example: List workspaces within a resource group.
        az databricks workspace list --resource-group MyResourceGroup

    :example: List workspaces within the default subscription.
        az databricks workspace list
    """

    _aaz_info = {
        "version": "2018-04-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/providers/microsoft.databricks/workspaces", "2018-04-01"],
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.databricks/workspaces", "2018-04-01"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_paging(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        return _args_schema

    def _execute_operations(self):
        condition_0 = has_value(self.ctx.subscription_id) and has_value(self.ctx.args.resource_group) is not True
        condition_1 = has_value(self.ctx.args.resource_group) and has_value(self.ctx.subscription_id)
        if condition_0:
            self.WorkspacesListBySubscription(ctx=self.ctx)()
        if condition_1:
            self.WorkspacesListByResourceGroup(ctx=self.ctx)()

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance.value, client_flatten=True)
        next_link = self.deserialize_output(self.ctx.vars.instance.next_link)
        return result, next_link

    class WorkspacesListBySubscription(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/providers/Microsoft.Databricks/workspaces",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2018-04-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.next_link = AAZStrType(
                serialized_name="nextLink",
            )
            _schema_on_200.value = AAZListType()

            value = cls._schema_on_200.value
            value.Element = AAZObjectType()

            _element = cls._schema_on_200.value.Element
            _element.id = AAZStrType(
                flags={"read_only": True},
            )
            _element.location = AAZStrType(
                flags={"required": True},
            )
            _element.name = AAZStrType(
                flags={"read_only": True},
            )
            _element.properties = AAZObjectType(
                flags={"required": True, "client_flatten": True},
            )
            _element.sku = AAZObjectType()
            _element.tags = AAZDictType()
            _element.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200.value.Element.properties
            properties.authorizations = AAZListType()
            properties.created_by = AAZObjectType(
                serialized_name="createdBy",
            )
            _build_schema_created_by_read(properties.created_by)
            properties.created_date_time = AAZStrType(
                serialized_name="createdDateTime",
                flags={"read_only": True},
            )
            properties.managed_resource_group_id = AAZStrType(
                serialized_name="managedResourceGroupId",
                flags={"required": True},
            )
            properties.parameters = AAZObjectType()
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )
            properties.storage_account_identity = AAZObjectType(
                serialized_name="storageAccountIdentity",
            )
            properties.ui_definition_uri = AAZStrType(
                serialized_name="uiDefinitionUri",
            )
            properties.updated_by = AAZObjectType(
                serialized_name="updatedBy",
            )
            _build_schema_created_by_read(properties.updated_by)
            properties.workspace_id = AAZStrType(
                serialized_name="workspaceId",
                flags={"read_only": True},
            )
            properties.workspace_url = AAZStrType(
                serialized_name="workspaceUrl",
                flags={"read_only": True},
            )

            authorizations = cls._schema_on_200.value.Element.properties.authorizations
            authorizations.Element = AAZObjectType()

            _element = cls._schema_on_200.value.Element.properties.authorizations.Element
            _element.principal_id = AAZStrType(
                serialized_name="principalId",
                flags={"required": True},
            )
            _element.role_definition_id = AAZStrType(
                serialized_name="roleDefinitionId",
                flags={"required": True},
            )

            parameters = cls._schema_on_200.value.Element.properties.parameters
            parameters.aml_workspace_id = AAZObjectType(
                serialized_name="amlWorkspaceId",
            )
            _build_schema_workspace_custom_string_parameter_read(parameters.aml_workspace_id)
            parameters.custom_private_subnet_name = AAZObjectType(
                serialized_name="customPrivateSubnetName",
            )
            _build_schema_workspace_custom_string_parameter_read(parameters.custom_private_subnet_name)
            parameters.custom_public_subnet_name = AAZObjectType(
                serialized_name="customPublicSubnetName",
            )
            _build_schema_workspace_custom_string_parameter_read(parameters.custom_public_subnet_name)
            parameters.custom_virtual_network_id = AAZObjectType(
                serialized_name="customVirtualNetworkId",
            )
            _build_schema_workspace_custom_string_parameter_read(parameters.custom_virtual_network_id)
            parameters.enable_no_public_ip = AAZObjectType(
                serialized_name="enableNoPublicIp",
            )
            _build_schema_workspace_custom_boolean_parameter_read(parameters.enable_no_public_ip)
            parameters.encryption = AAZObjectType()
            parameters.load_balancer_backend_pool_name = AAZObjectType(
                serialized_name="loadBalancerBackendPoolName",
            )
            _build_schema_workspace_custom_string_parameter_read(parameters.load_balancer_backend_pool_name)
            parameters.load_balancer_id = AAZObjectType(
                serialized_name="loadBalancerId",
            )
            _build_schema_workspace_custom_string_parameter_read(parameters.load_balancer_id)
            parameters.nat_gateway_name = AAZObjectType(
                serialized_name="natGatewayName",
            )
            _build_schema_workspace_custom_string_parameter_read(parameters.nat_gateway_name)
            parameters.prepare_encryption = AAZObjectType(
                serialized_name="prepareEncryption",
            )
            _build_schema_workspace_custom_boolean_parameter_read(parameters.prepare_encryption)
            parameters.public_ip_name = AAZObjectType(
                serialized_name="publicIpName",
            )
            _build_schema_workspace_custom_string_parameter_read(parameters.public_ip_name)
            parameters.require_infrastructure_encryption = AAZObjectType(
                serialized_name="requireInfrastructureEncryption",
            )
            _build_schema_workspace_custom_boolean_parameter_read(parameters.require_infrastructure_encryption)
            parameters.resource_tags = AAZObjectType(
                serialized_name="resourceTags",
                flags={"read_only": True},
            )
            parameters.storage_account_name = AAZObjectType(
                serialized_name="storageAccountName",
            )
            _build_schema_workspace_custom_string_parameter_read(parameters.storage_account_name)
            parameters.storage_account_sku_name = AAZObjectType(
                serialized_name="storageAccountSkuName",
            )
            _build_schema_workspace_custom_string_parameter_read(parameters.storage_account_sku_name)
            parameters.vnet_address_prefix = AAZObjectType(
                serialized_name="vnetAddressPrefix",
            )
            _build_schema_workspace_custom_string_parameter_read(parameters.vnet_address_prefix)

            encryption = cls._schema_on_200.value.Element.properties.parameters.encryption
            encryption.type = AAZStrType(
                flags={"read_only": True},
            )
            encryption.value = AAZObjectType()

            value = cls._schema_on_200.value.Element.properties.parameters.encryption.value
            value.key_name = AAZStrType(
                serialized_name="KeyName",
            )
            value.key_source = AAZStrType(
                serialized_name="keySource",
            )
            value.keyvaulturi = AAZStrType()
            value.keyversion = AAZStrType()

            resource_tags = cls._schema_on_200.value.Element.properties.parameters.resource_tags
            resource_tags.type = AAZStrType(
                flags={"read_only": True},
            )
            resource_tags.value = AAZDictType(
                flags={"required": True, "read_only": True},
            )

            storage_account_identity = cls._schema_on_200.value.Element.properties.storage_account_identity
            storage_account_identity.principal_id = AAZStrType(
                serialized_name="principalId",
                flags={"read_only": True},
            )
            storage_account_identity.tenant_id = AAZStrType(
                serialized_name="tenantId",
                flags={"read_only": True},
            )
            storage_account_identity.type = AAZStrType(
                flags={"read_only": True},
            )

            sku = cls._schema_on_200.value.Element.sku
            sku.name = AAZStrType(
                flags={"required": True},
            )
            sku.tier = AAZStrType()

            tags = cls._schema_on_200.value.Element.tags
            tags.Element = AAZStrType()

            return cls._schema_on_200

    class WorkspacesListByResourceGroup(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Databricks/workspaces",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2018-04-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.next_link = AAZStrType(
                serialized_name="nextLink",
            )
            _schema_on_200.value = AAZListType()

            value = cls._schema_on_200.value
            value.Element = AAZObjectType()

            _element = cls._schema_on_200.value.Element
            _element.id = AAZStrType(
                flags={"read_only": True},
            )
            _element.location = AAZStrType(
                flags={"required": True},
            )
            _element.name = AAZStrType(
                flags={"read_only": True},
            )
            _element.properties = AAZObjectType(
                flags={"required": True, "client_flatten": True},
            )
            _element.sku = AAZObjectType()
            _element.tags = AAZDictType()
            _element.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200.value.Element.properties
            properties.authorizations = AAZListType()
            properties.created_by = AAZObjectType(
                serialized_name="createdBy",
            )
            _build_schema_created_by_read(properties.created_by)
            properties.created_date_time = AAZStrType(
                serialized_name="createdDateTime",
                flags={"read_only": True},
            )
            properties.managed_resource_group_id = AAZStrType(
                serialized_name="managedResourceGroupId",
                flags={"required": True},
            )
            properties.parameters = AAZObjectType()
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )
            properties.storage_account_identity = AAZObjectType(
                serialized_name="storageAccountIdentity",
            )
            properties.ui_definition_uri = AAZStrType(
                serialized_name="uiDefinitionUri",
            )
            properties.updated_by = AAZObjectType(
                serialized_name="updatedBy",
            )
            _build_schema_created_by_read(properties.updated_by)
            properties.workspace_id = AAZStrType(
                serialized_name="workspaceId",
                flags={"read_only": True},
            )
            properties.workspace_url = AAZStrType(
                serialized_name="workspaceUrl",
                flags={"read_only": True},
            )

            authorizations = cls._schema_on_200.value.Element.properties.authorizations
            authorizations.Element = AAZObjectType()

            _element = cls._schema_on_200.value.Element.properties.authorizations.Element
            _element.principal_id = AAZStrType(
                serialized_name="principalId",
                flags={"required": True},
            )
            _element.role_definition_id = AAZStrType(
                serialized_name="roleDefinitionId",
                flags={"required": True},
            )

            parameters = cls._schema_on_200.value.Element.properties.parameters
            parameters.aml_workspace_id = AAZObjectType(
                serialized_name="amlWorkspaceId",
            )
            _build_schema_workspace_custom_string_parameter_read(parameters.aml_workspace_id)
            parameters.custom_private_subnet_name = AAZObjectType(
                serialized_name="customPrivateSubnetName",
            )
            _build_schema_workspace_custom_string_parameter_read(parameters.custom_private_subnet_name)
            parameters.custom_public_subnet_name = AAZObjectType(
                serialized_name="customPublicSubnetName",
            )
            _build_schema_workspace_custom_string_parameter_read(parameters.custom_public_subnet_name)
            parameters.custom_virtual_network_id = AAZObjectType(
                serialized_name="customVirtualNetworkId",
            )
            _build_schema_workspace_custom_string_parameter_read(parameters.custom_virtual_network_id)
            parameters.enable_no_public_ip = AAZObjectType(
                serialized_name="enableNoPublicIp",
            )
            _build_schema_workspace_custom_boolean_parameter_read(parameters.enable_no_public_ip)
            parameters.encryption = AAZObjectType()
            parameters.load_balancer_backend_pool_name = AAZObjectType(
                serialized_name="loadBalancerBackendPoolName",
            )
            _build_schema_workspace_custom_string_parameter_read(parameters.load_balancer_backend_pool_name)
            parameters.load_balancer_id = AAZObjectType(
                serialized_name="loadBalancerId",
            )
            _build_schema_workspace_custom_string_parameter_read(parameters.load_balancer_id)
            parameters.nat_gateway_name = AAZObjectType(
                serialized_name="natGatewayName",
            )
            _build_schema_workspace_custom_string_parameter_read(parameters.nat_gateway_name)
            parameters.prepare_encryption = AAZObjectType(
                serialized_name="prepareEncryption",
            )
            _build_schema_workspace_custom_boolean_parameter_read(parameters.prepare_encryption)
            parameters.public_ip_name = AAZObjectType(
                serialized_name="publicIpName",
            )
            _build_schema_workspace_custom_string_parameter_read(parameters.public_ip_name)
            parameters.require_infrastructure_encryption = AAZObjectType(
                serialized_name="requireInfrastructureEncryption",
            )
            _build_schema_workspace_custom_boolean_parameter_read(parameters.require_infrastructure_encryption)
            parameters.resource_tags = AAZObjectType(
                serialized_name="resourceTags",
                flags={"read_only": True},
            )
            parameters.storage_account_name = AAZObjectType(
                serialized_name="storageAccountName",
            )
            _build_schema_workspace_custom_string_parameter_read(parameters.storage_account_name)
            parameters.storage_account_sku_name = AAZObjectType(
                serialized_name="storageAccountSkuName",
            )
            _build_schema_workspace_custom_string_parameter_read(parameters.storage_account_sku_name)
            parameters.vnet_address_prefix = AAZObjectType(
                serialized_name="vnetAddressPrefix",
            )
            _build_schema_workspace_custom_string_parameter_read(parameters.vnet_address_prefix)

            encryption = cls._schema_on_200.value.Element.properties.parameters.encryption
            encryption.type = AAZStrType(
                flags={"read_only": True},
            )
            encryption.value = AAZObjectType()

            value = cls._schema_on_200.value.Element.properties.parameters.encryption.value
            value.key_name = AAZStrType(
                serialized_name="KeyName",
            )
            value.key_source = AAZStrType(
                serialized_name="keySource",
            )
            value.keyvaulturi = AAZStrType()
            value.keyversion = AAZStrType()

            resource_tags = cls._schema_on_200.value.Element.properties.parameters.resource_tags
            resource_tags.type = AAZStrType(
                flags={"read_only": True},
            )
            resource_tags.value = AAZDictType(
                flags={"required": True, "read_only": True},
            )

            storage_account_identity = cls._schema_on_200.value.Element.properties.storage_account_identity
            storage_account_identity.principal_id = AAZStrType(
                serialized_name="principalId",
                flags={"read_only": True},
            )
            storage_account_identity.tenant_id = AAZStrType(
                serialized_name="tenantId",
                flags={"read_only": True},
            )
            storage_account_identity.type = AAZStrType(
                flags={"read_only": True},
            )

            sku = cls._schema_on_200.value.Element.sku
            sku.name = AAZStrType(
                flags={"required": True},
            )
            sku.tier = AAZStrType()

            tags = cls._schema_on_200.value.Element.tags
            tags.Element = AAZStrType()

            return cls._schema_on_200


_schema_created_by_read = None


def _build_schema_created_by_read(_schema):
    global _schema_created_by_read
    if _schema_created_by_read is not None:
        _schema.application_id = _schema_created_by_read.application_id
        _schema.oid = _schema_created_by_read.oid
        _schema.puid = _schema_created_by_read.puid
        return

    _schema_created_by_read = AAZObjectType()

    created_by_read = _schema_created_by_read
    created_by_read.application_id = AAZStrType(
        serialized_name="applicationId",
        flags={"read_only": True},
    )
    created_by_read.oid = AAZStrType(
        flags={"read_only": True},
    )
    created_by_read.puid = AAZStrType(
        flags={"read_only": True},
    )

    _schema.application_id = _schema_created_by_read.application_id
    _schema.oid = _schema_created_by_read.oid
    _schema.puid = _schema_created_by_read.puid


_schema_workspace_custom_boolean_parameter_read = None


def _build_schema_workspace_custom_boolean_parameter_read(_schema):
    global _schema_workspace_custom_boolean_parameter_read
    if _schema_workspace_custom_boolean_parameter_read is not None:
        _schema.type = _schema_workspace_custom_boolean_parameter_read.type
        _schema.value = _schema_workspace_custom_boolean_parameter_read.value
        return

    _schema_workspace_custom_boolean_parameter_read = AAZObjectType()

    workspace_custom_boolean_parameter_read = _schema_workspace_custom_boolean_parameter_read
    workspace_custom_boolean_parameter_read.type = AAZStrType(
        flags={"read_only": True},
    )
    workspace_custom_boolean_parameter_read.value = AAZBoolType(
        flags={"required": True},
    )

    _schema.type = _schema_workspace_custom_boolean_parameter_read.type
    _schema.value = _schema_workspace_custom_boolean_parameter_read.value


_schema_workspace_custom_string_parameter_read = None


def _build_schema_workspace_custom_string_parameter_read(_schema):
    global _schema_workspace_custom_string_parameter_read
    if _schema_workspace_custom_string_parameter_read is not None:
        _schema.type = _schema_workspace_custom_string_parameter_read.type
        _schema.value = _schema_workspace_custom_string_parameter_read.value
        return

    _schema_workspace_custom_string_parameter_read = AAZObjectType()

    workspace_custom_string_parameter_read = _schema_workspace_custom_string_parameter_read
    workspace_custom_string_parameter_read.type = AAZStrType(
        flags={"read_only": True},
    )
    workspace_custom_string_parameter_read.value = AAZStrType(
        flags={"required": True},
    )

    _schema.type = _schema_workspace_custom_string_parameter_read.type
    _schema.value = _schema_workspace_custom_string_parameter_read.value


__all__ = ["List"]
